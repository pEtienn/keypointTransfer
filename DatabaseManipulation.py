# -*- coding: utf-8 -*-
"""
Created on Tue Aug 13 20:51:52 2019

@author: Etenne Pepyn
"""
import os
from pathlib import Path
import numpy as np 
import nibabel as nib
import re

"""
EXAMPLE for CombineSegmentations and SelectLabelInSegmentation
srcPath=r'S:/Anatomy3-trainingset/segTest'
CombineSegmentations(srcPath,srcPath+'New')
SelectLabelInSegmentation(srcPath+'New',srcPath+'NewSelectedLabel',[29663,29662,30325,30324])
GetNumberPatientContainingLabel(srcPath+'NewSelectedLabel',[]) #to check if the labels were present and copied
"""

def CombineSegmentations(srcPath,outPath):
    """
    Takes segmentation files of the Visceral dataset and creates a new set of files.
    There's one new file per patient, containing all segmentations.
    Funciton skips files causing problems.
     *** INPUT ***
    srcPath: path of the segmentation folder
    """

    rLabelNumber=re.compile('(wb|Ab)_([0-9]+)_')
    rVolumeID=re.compile('(^.+[wb|Ab])_')
    srcPath=str(Path(srcPath))
    outPath=str(Path(outPath))
    allF=os.listdir(srcPath)
    unreadableFile=' '
    previousOutput=' '
    affine = np.diag([1, 2, 3, 1])

    for f in allF:  
        shortName=rVolumeID.findall(f)[0]

        if shortName!=unreadableFile:
            outputName=(os.path.join(outPath,shortName+'.nii.gz'))
            try:
                img=nib.load(os.path.join(srcPath,f))
                arr=img.get_fdata()

            except:
                print('problem loading '+f+', skipping '+shortName)
                unreadableFile=shortName

                
            if shortName!=unreadableFile:
                if previousOutput!=outputName:

                    h=img.header
                    shape=h.get_data_shape()   
                    if previousOutput!=' ' and previousOutput!= os.path.join(outPath,unreadableFile+'.nii.gz'):

                        print(previousOutput)
                        if previousOutput==(os.path.join(outPath,'10000083_3_MRT1_wb.nii.gz')):
                            print('oups')
                        arrayImg = nib.Nifti1Image(segArray, affine)

                        nib.save(arrayImg,previousOutput) 
                    segArray=np.zeros(shape)
                
                uni=np.unique(arr)
                if np.shape(uni)[0]==2:
                    k=rLabelNumber.findall(f)[0][1]
                    n=int(k)
                    if uni[1]!=n:  
                        arr=(arr>0)*n
                else:
                    arr=0
                segArray=segArray+arr*(segArray==0)
        previousOutput=outputName
    
    if shortName!=unreadableFile:
        arrayImg = nib.Nifti1Image(segArray, affine)
        nib.save(arrayImg,outputName) 
        
    print(previousOutput)

def SelectLabelInSegmentation(srcPath,outPath,labelToKeep):
    """
    Takes all the segmentation files generated by CombineSegmentations and generates new
    segmentations files containing only labels specified by labelToKeep
     *** INPUT ***
    srcPath: path of the output of CombineSegmentations
    outPath: destination of new segmentations files
    labelToKeep: list containing labels to keep
    """
    affine = np.diag([1, 2, 3, 1])
    allF=os.listdir(srcPath)
    for f in allF: 
        img=nib.load(os.path.join(srcPath,f))
        arr=img.get_fdata()
        outArr=np.zeros(arr.shape)
        for i in range(len(labelToKeep)):
            outArr=outArr+(arr==labelToKeep[i])*labelToKeep[i]
        arrayImg = nib.Nifti1Image(outArr, affine)
        nib.save(arrayImg,os.path.join(outPath,f)) 
        
def GetLabelInPatient(srcPath,labelList):
    """
    Tool to check the presence of some labels in combined segmentation files, 
    or all the labels present if labelList=[]
     *** INPUT ***
    srcPath:folder containing combined segmentation files
    labelList: either list of labels you want to verify the presence,
            or empty, to show all the labels present in each file
     *** OUTPUT ***
    The present labels will be shown on the console after the name of the file
    allLabels: matrix n*2, 
            colums: labelNb | nb Of Patient With That Label     
    """
    np.set_printoptions(precision=3)
    allF=os.listdir(srcPath)
    allLabels=np.zeros((1,2),dtype=np.int64)

    for f in allF: 
        img=nib.load(os.path.join(srcPath,f))
        arr=img.get_fdata()
        print (f,end=" ")
        if not labelList :
            u=np.unique(arr)
            for l in u:
                print(l,end=" ")
                if np.sum(l==allLabels[:,0],0)==0:
                    allLabels=np.concatenate((allLabels,np.array([[int(l),1]])),axis=0)
                else:
                    allLabels[allLabels[:,0]==l,1]+=1
        else:
            for l in labelList:
                if np.sum(arr==l)!=0:
                    print(l,end=" ")
                    if np.sum(l==allLabels[:,0],0)==0:
                        allLabels=np.concatenate((allLabels,np.array([[int(l),1]])),axis=0)
                    else:
                        allLabels[allLabels[:,0]==l,1]+=1
        print(' ')
        if np.sum(allLabels==256)>0:
            pass
    return allLabels[allLabels[:,0].argsort()]

def GetCropBoundaries(path):
    path=str(Path(path))
    allF=os.listdir(path)
    bestXYZ=np.zeros((3,2),dtype=np.int64)
    for f in allF:
        img=nib.load(os.path.join(path,f))
        arr=np.float32(np.squeeze(img.get_fdata()))
        a=np.nonzero(arr)
        XYZ=np.zeros((3,2),dtype=np.int64)
        for i in range(3):
            XYZ[i,0]=np.min(a[i])
            XYZ[i,1]=np.max(a[i])+1
#        print(XYZ)
        print(arr.shape)
        if np.sum(bestXYZ[:,0])==0:
            bestXYZ[:,0]=XYZ[:,0]
        else:
            bestXYZ[:,0]=np.minimum(bestXYZ[:,0],XYZ[:,0])
        bestXYZ[:,1]=np.maximum(bestXYZ[:,1],XYZ[:,1])
    return bestXYZ

def Crop(srcPath,outPath,XYZ,margin=[0,0,0],decompress=True):
    """
    Crop all images in path
    XYZ: output from GetCropBoundaries
    Margin: [x,y,z] margin to add to the boudary boxes, the margin will be added 2 times on each axis
    *** OUTPUT ***
     modify directly the images
     """
    srcPath=str(Path(srcPath))
    allF=os.listdir(srcPath) 
    for f in allF:
        img=nib.load(os.path.join(srcPath,f))
        arr=np.int16(np.squeeze(img.get_fdata()))
        nh=img.header
        newArr=arr[XYZ[0,0]-margin[0]:XYZ[0,1]+margin[0],
                   XYZ[1,0]-margin[1]:XYZ[1,1]+margin[1],
                   XYZ[2,0]-margin[2]:XYZ[2,1]+margin[2],]
        imgv2=nib.Nifti1Image(newArr,affine=None,header=nh)
        if decompress==True:
            nib.save(imgv2,os.path.join(outPath,f[:-3]))
        else:
            nib.save(imgv2,os.path.join(outPath,f))
            
def Rename(srcPath,suffix,extension='.nii.gz',numberDetectionRegex='^[0-9]*([0-9]{4})_'):
    rPatientNumber=re.compile(numberDetectionRegex)
    srcPath=str(Path(srcPath))
    allF=os.listdir(srcPath) 
    for f in allF:
        num=rPatientNumber.findall(f)[0]
        os.rename(os.path.join(srcPath,f),os.path.join(srcPath,num+suffix+extension))
        
def GetCorrespondingVolumes(volumesPath,outPath,labelPath,volumeID='^(.+)[wb|Ab]'):
    rVolumeID=re.compile(volumeID)
    volumesPath=str(Path(volumesPath))
    outPath=str(Path(outPath))
    labelPath=str(Path(labelPath))
    
    allHdrF=os.listdir(volumesPath)
    allLabelF=os.listdir(labelPath) #we take only hdr files that also have a label
    for f in allLabelF:
        num=rVolumeID.findall(f)[0]
        hdrF=[x for x in allHdrF if (num in x)][0]
        img=nib.load(os.path.join(volumesPath,hdrF))
        nib.save(img,os.path.join(outPath,hdrF))
        
def StandardizeLabels(srcPath,outPath,labels):
    srcPath=str(Path(srcPath))
    allF=os.listdir(srcPath) 
    for f in allF:
        img=nib.load(os.path.join(srcPath,f))
        arr=np.int16(np.squeeze(img.get_fdata()))
        nh=img.header
        for i in range(len(labels)):
            arr[arr==labels[i]]=i
        imgv2=nib.Nifti1Image(arr,affine=None,header=nh)
        nib.save(imgv2,os.path.join(outPath,f))