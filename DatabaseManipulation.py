# -*- coding: utf-8 -*-
"""
Created on Tue Aug 13 20:51:52 2019

@author: Etenne Pepyn
"""

import os
import numpy as np 
import nibabel as nib
import re

"""
EXAMPLE for CombineSegmentations and SelectLabelInSegmentation
srcPath='S:/Anatomy3-trainingset/segTest'
CombineSegmentations(srcPath,srcPath+'New')
SelectLabelInSegmentation(srcPath+'New',srcPath+'NewSelectedLabel',[29663,29662,30325,30324])
GetNumberPatientContainingLabel(srcPath+'NewSelectedLabel',[]) #to check if the labels were present and copied
"""

def CombineSegmentations(srcPath,outPath):
    """
    Takes segmentation files of the Visceral dataset and creates a new set of files.
    There's one new file per patient, containing all segmentations.
    Funciton skips files causing problems.
     *** INPUT ***
    srcPath: path of the segmentation folder
    """

    rLabelNumber=re.compile('(wb|Ab)_([0-9]+)_')
    rVolumeID=re.compile('(^.+[wb|Ab])_')
    
    allF=os.listdir(srcPath)
    unreadableFile=' '
    previousOutput=' '
    affine = np.diag([1, 2, 3, 1])
    for f in allF: 
        shortName=rVolumeID.findall(f)[0]
        if shortName!=unreadableFile:
            outputName=os.path.join(outPath,shortName+'.nii.gz')
            try:
                if previousOutput!=outputName:
                    img=nib.load(os.path.join(srcPath,f))
                    h=img.header
                    shape=h.get_data_shape()   
                    if previousOutput!=' ' and shortName!=unreadableFile:
                        print(previousOutput)
                        arrayImg = nib.Nifti1Image(segArray, affine)
                        nib.save(arrayImg,previousOutput) 
                    segArray=np.zeros(shape)
                else:
                    img=nib.load(os.path.join(srcPath,f))
                arr=img.get_fdata()
                uni=np.unique(arr)
                if np.shape(uni)[0]>1:
                    if uni[1]==1:
                        k=rLabelNumber.findall(f)[0][1]
                        n=int(k[0])
                        arr=arr*n
                segArray=segArray+arr
            except:
                print('problem loading '+f+', skipping '+shortName)
                unreadableFile=shortName

        previousOutput=outputName
    if shortName!=unreadableFile:
        arrayImg = nib.Nifti1Image(segArray, affine)
        nib.save(arrayImg,outputName) 

def SelectLabelInSegmentation(srcPath,outPath,labelToKeep):
    """
    Takes all the segmentation files generated by CombineSegmentations and generates new
    segmentations files containing only labels specified by labelToKeep
     *** INPUT ***
    srcPath: path of the output of CombineSegmentations
    outPath: destination of new segmentations files
    labelToKeep: list containing labels to keep
    """
    affine = np.diag([1, 2, 3, 1])
    allF=os.listdir(srcPath)
    for f in allF: 
        img=nib.load(os.path.join(srcPath,f))
        arr=img.get_fdata()
        outArr=np.zeros(arr.shape)
        for i in range(len(labelToKeep)):
            outArr=outArr+(arr==labelToKeep[i])*labelToKeep[i]
        arrayImg = nib.Nifti1Image(outArr, affine)
        nib.save(arrayImg,os.path.join(outPath,f)) 
        
def GetNumberPatientContainingLabel(srcPath,labelList):
    """
    Tool to check the presence of some labels in combined segmentation files, 
    or all the labels present if labelList=[]
     *** INPUT ***
    srcPath:folder containing combined segmentation files
    labelList: either list of labels you want to verify the presence,
            or empty, to show all the labels present in each file
     *** OUTPUT ***
    The present labels will be shown on the console after the name of the file
    """
    allF=os.listdir(srcPath)
    for f in allF: 
        img=nib.load(os.path.join(srcPath,f))
        arr=img.get_fdata()
        print (f,end=" ")
        if not labelList :
            u=np.unique(arr)
            for i in u:
                print(i,end=" ")
        else:
            for l in labelList:
                if np.sum(arr==l)!=0:
                    print(l,end=" ")
        print(' ')

                
            